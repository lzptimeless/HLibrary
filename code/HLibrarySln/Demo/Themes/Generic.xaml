<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <!--  公共颜色-开始  -->
    <!--  主题色  -->
    <Color x:Key="color-accent">#ED242C</Color>
    <Color x:Key="color-accent-light">#ED575D</Color>
    <Color x:Key="color-accent-deep">#C82129</Color>
    <SolidColorBrush x:Key="brush-accent" Color="{StaticResource color-accent}" />
    <SolidColorBrush x:Key="brush-accent-light" Color="{StaticResource color-accent-light}" />
    <SolidColorBrush x:Key="brush-accent-deep" Color="{StaticResource color-accent-deep}" />

    <!--  透明色，作为渐变色的节点时会用到  -->
    <Color x:Key="color-transparent">#00000000</Color>
    <SolidColorBrush x:Key="brush-transparent" Color="{StaticResource color-transparent}" />

    <!--  文本色  -->
    <Color x:Key="color-text">#E6E6E6</Color>
    <!--  用于disable状态，次要文字  -->
    <Color x:Key="color-text-weak">#ABABAB</Color>
    <!--  用于标题，强调文字  -->
    <Color x:Key="color-text-highlight">#FFFFFF</Color>
    <!--  文字选择背景色  -->
    <Color x:Key="color-text-selection">#90FFFFFF</Color>
    <!--  文字光标  -->
    <Color x:Key="color-text-caret">#FFFFFF</Color>
    <!--  有深色背景的文本色  -->
    <Color x:Key="color-text-fg">#E6E6E6</Color>
    <!--  有深色背景的，用于disable状态，次要文字  -->
    <Color x:Key="color-text-weak-fg">#ABABAB</Color>
    <!--  有深色背景的，用于标题，强调文字  -->
    <Color x:Key="color-text-highlight-fg">#FFFFFF</Color>
    <!--  有深色背景的，文字选择背景色  -->
    <Color x:Key="color-text-selection-fg">#90FFFFFF</Color>
    <!--  有深色背景的，文字光标  -->
    <Color x:Key="color-text-caret-fg">#FFFFFF</Color>
    <SolidColorBrush x:Key="brush-text" Color="{StaticResource color-text}" />
    <SolidColorBrush x:Key="brush-text-weak" Color="{StaticResource color-text-weak}" />
    <SolidColorBrush x:Key="brush-text-highlight" Color="{StaticResource color-text-highlight}" />
    <SolidColorBrush x:Key="brush-text-selection" Color="{StaticResource color-text-selection}" />
    <SolidColorBrush x:Key="brush-text-caret" Color="{StaticResource color-text-caret}" />
    <SolidColorBrush x:Key="brush-text-fg" Color="{StaticResource color-text-fg}" />
    <SolidColorBrush x:Key="brush-text-weak-fg" Color="{StaticResource color-text-weak-fg}" />
    <SolidColorBrush x:Key="brush-text-highlight-fg" Color="{StaticResource color-text-highlight-fg}" />
    <SolidColorBrush x:Key="brush-text-selection-fg" Color="{StaticResource color-text-selection-fg}" />
    <SolidColorBrush x:Key="brush-text-caret-fg" Color="{StaticResource color-text-caret-fg}" />

    <!--  通用控件色  -->
    <Color x:Key="color-control-fg">#E6E6E6</Color>
    <Color x:Key="color-control-bd">#40FFFFFF</Color>
    <Color x:Key="color-control-bg">#20FFFFFF</Color>
    <Color x:Key="color-control-hover-fg">#E6E6E6</Color>
    <Color x:Key="color-control-hover-bd">#60FFFFFF</Color>
    <Color x:Key="color-control-hover-bg">#20FFFFFF</Color>
    <Color x:Key="color-control-press-fg">#E6E6E6</Color>
    <Color x:Key="color-control-press-bd">#60FFFFFF</Color>
    <Color x:Key="color-control-press-bg">#30FFFFFF</Color>
    <Color x:Key="color-control-select-fg">#E6E6E6</Color>
    <Color x:Key="color-control-select-bd">#20FFFFFF</Color>
    <Color x:Key="color-control-select-bg">#20FFFFFF</Color>
    <Color x:Key="color-control-disable-fg">#ABABAB</Color>
    <Color x:Key="color-control-disable-bd">#00000000</Color>
    <Color x:Key="color-control-disable-bg">#00000000</Color>
    <SolidColorBrush x:Key="brush-control-fg" Color="{StaticResource color-control-fg}" />
    <SolidColorBrush x:Key="brush-control-bd" Color="{StaticResource color-control-bd}" />
    <SolidColorBrush x:Key="brush-control-bg" Color="{StaticResource color-control-bg}" />
    <SolidColorBrush x:Key="brush-control-hover-fg" Color="{StaticResource color-control-hover-fg}" />
    <SolidColorBrush x:Key="brush-control-hover-bd" Color="{StaticResource color-control-hover-bd}" />
    <SolidColorBrush x:Key="brush-control-hover-bg" Color="{StaticResource color-control-hover-bg}" />
    <SolidColorBrush x:Key="brush-control-press-fg" Color="{StaticResource color-control-press-fg}" />
    <SolidColorBrush x:Key="brush-control-press-bd" Color="{StaticResource color-control-press-bd}" />
    <SolidColorBrush x:Key="brush-control-press-bg" Color="{StaticResource color-control-press-bg}" />
    <SolidColorBrush x:Key="brush-control-select-fg" Color="{StaticResource color-control-select-fg}" />
    <SolidColorBrush x:Key="brush-control-select-bd" Color="{StaticResource color-control-select-bd}" />
    <SolidColorBrush x:Key="brush-control-select-bg" Color="{StaticResource color-control-select-bg}" />
    <SolidColorBrush x:Key="brush-control-disable-fg" Color="{StaticResource color-control-disable-fg}" />
    <SolidColorBrush x:Key="brush-control-disable-bd" Color="{StaticResource color-control-disable-bd}" />
    <SolidColorBrush x:Key="brush-control-disable-bg" Color="{StaticResource color-control-disable-bg}" />
    <SolidColorBrush x:Key="brush-control-highlight-fg" Color="{StaticResource color-text-fg}" />
    <SolidColorBrush x:Key="brush-control-highlight-bd" Color="{StaticResource color-accent-deep}" />
    <SolidColorBrush x:Key="brush-control-highlight-bg" Color="{StaticResource color-accent}" />
    <SolidColorBrush x:Key="brush-control-highlight-hover-fg" Color="{StaticResource color-text-fg}" />
    <SolidColorBrush x:Key="brush-control-highlight-hover-bd" Color="{StaticResource color-accent-deep}" />
    <SolidColorBrush x:Key="brush-control-highlight-hover-bg" Color="{StaticResource color-accent-light}" />
    <SolidColorBrush x:Key="brush-control-highlight-press-fg" Color="{StaticResource color-text-fg}" />
    <SolidColorBrush x:Key="brush-control-highlight-press-bd" Color="{StaticResource color-accent-deep}" />
    <SolidColorBrush x:Key="brush-control-highlight-press-bg" Color="{StaticResource color-accent}" />
    <SolidColorBrush x:Key="brush-control-highlight-disable-fg" Color="{StaticResource color-control-disable-fg}" />
    <SolidColorBrush x:Key="brush-control-highlight-disable-bd" Color="{StaticResource color-control-disable-bd}" />
    <SolidColorBrush x:Key="brush-control-highlight-disable-bg" Color="{StaticResource color-control-disable-bg}" />

    <!--  通用容器色  -->
    <Color x:Key="color-panel-bd">#3A3A3A</Color>
    <Color x:Key="color-panel-bg">#1E1E1E</Color>
    <Color x:Key="color-panel-alternate-bd">#4A4A4A</Color>
    <Color x:Key="color-panel-alternate-bg">#2E2E2E</Color>
    <Color x:Key="color-panel-hover-bd">#60FFFFFF</Color>
    <Color x:Key="color-panel-hover-bg">#20FFFFFF</Color>
    <Color x:Key="color-panel-select-bd">#20FFFFFF</Color>
    <Color x:Key="color-panel-select-bg">#20FFFFFF</Color>
    <Color x:Key="color-panel-disable-bd">#00000000</Color>
    <Color x:Key="color-panel-disable-bg">#00000000</Color>
    <SolidColorBrush x:Key="brush-panel-bd" Color="{StaticResource color-panel-bd}" />
    <SolidColorBrush x:Key="brush-panel-bg" Color="{StaticResource color-panel-bg}" />
    <SolidColorBrush x:Key="brush-panel-alternate-bd" Color="{StaticResource color-panel-alternate-bd}" />
    <SolidColorBrush x:Key="brush-panel-alternate-bg" Color="{StaticResource color-panel-alternate-bg}" />
    <SolidColorBrush x:Key="brush-panel-hover-bd" Color="{StaticResource color-panel-hover-bd}" />
    <SolidColorBrush x:Key="brush-panel-hover-bg" Color="{StaticResource color-panel-hover-bg}" />
    <SolidColorBrush x:Key="brush-panel-select-bd" Color="{StaticResource color-panel-select-bd}" />
    <SolidColorBrush x:Key="brush-panel-select-bg" Color="{StaticResource color-panel-select-bg}" />
    <SolidColorBrush x:Key="brush-panel-disable-bd" Color="{StaticResource color-panel-disable-bd}" />
    <SolidColorBrush x:Key="brush-panel-disable-bg" Color="{StaticResource color-panel-disable-bg}" />
    <SolidColorBrush x:Key="brush-panel-highlight-bd" Color="{StaticResource color-accent-deep}" />
    <SolidColorBrush x:Key="brush-panel-highlight-bg" Color="{StaticResource color-accent}" />

    <!--  弹出层颜色  -->
    <Color x:Key="color-popup-bd">#3A3A3A</Color>
    <Color x:Key="color-popup-bg">#101010</Color>
    <SolidColorBrush x:Key="brush-popup-bd" Color="{StaticResource color-popup-bd}" />
    <SolidColorBrush x:Key="brush-popup-bg" Color="{StaticResource color-popup-bg}" />

    <!--  窗口色  -->
    <Color x:Key="color-window-bd">#3A3A3A</Color>
    <Color x:Key="color-window-bg">#1E1E1E</Color>
    <SolidColorBrush x:Key="brush-window-bd" Color="{StaticResource color-window-bd}" />
    <SolidColorBrush x:Key="brush-window-bg" Color="{StaticResource color-window-bg}" />
    <!--  公共颜色-结束  -->

    <!--  用到的图标  -->
    <PathGeometry x:Key="icon-cut">M13.876871,20.849818L11.666832,26.864772C11.569847,27.307759 11.592857,27.772721 11.786828,28.044751 12.000819,28.357736 12.502837,28.477731 13.093845,28.357736 14.175884,28.13374 15.609856,27.055749 16.073909,24.76378 16.342893,23.460754 16.255856,22.476817 15.809869,21.840776L15.809869,21.841813C15.33489,21.166833,14.490889,20.935817,13.876871,20.849818z M6.0755872,11.797367C4.3400048,11.816226 3.1917004,12.630284 2.699784,13.42088 2.1037709,14.379855 2.4807879,15.137842 3.7377557,15.283898L10.001841,15.28988C10.147839,14.683868 10.217847,13.812905 9.743844,13.139877 9.3068284,12.500907 8.4128398,12.077877 7.099781,11.8739 6.7385358,11.817653 6.3969917,11.793875 6.0755872,11.797367z M20.679902,0L15.572868,15.597859 15.570854,15.598836 31.999995,16.258864 27.931971,19.085799 19.303914,19.521831 15.895868,18.065852 14.77385,18.031856 14.630844,18.481862C15.680901,18.68584 16.974856,19.185836 17.837899,20.425813 18.687882,21.639789 18.907916,23.263795 18.50392,25.253764 17.790902,28.734746 15.359854,30.325734 13.54386,30.701707 11.962855,31.027692 10.437819,30.438708 9.6458205,29.304748 9.2578172,28.746709 9.2778367,26.259736 9.3058519,26.152741L10.012828,24.244803 12.126858,17.98083 5.7267846,17.807859 3.6637806,17.857846C3.4997777,17.838864 1.0257599,16.92884 0.64575182,16.381848 -0.15027454,15.241845 -0.25824655,13.478864 0.59173577,12.108883 1.5807567,10.531934 3.9707896,8.8849173 7.4747838,9.4249507 9.4858464,9.730917 10.931841,10.510938 11.775842,11.720886 12.661835,12.987902 12.661835,14.413851 12.477874,15.471885L12.935884,15.494895 13.30985,14.367892 13.173862,10.714915 16.613891,2.8279734z</PathGeometry>
    <PathGeometry x:Key="icon-copy">M12,8L12,30 28,30 28,14 22,14 22,8z M10,6L24,6 24,8 26,8 26,10 24,10 24,12 26,12 26,10 28,10 28,12 30,12 30,32 10,32z M0,0L10,0 10,2 12,2 12,4 8,4 8,2 2,2 2,20 8,20 8,22 0,22z</PathGeometry>
    <PathGeometry x:Key="icon-paste">M15.780046,21.209021L23.000044,28.471234 23.000044,22.999996 25.000044,22.999996 25.000044,31.999996 16.000044,31.999996 16.000044,29.999996 21.700115,29.999996 14.362039,22.619015z M12.416057,1.9139996C11.419057,1.9139996,10.607057,2.6970005,10.607057,3.6590004L10.607057,4.6159992 6.8670568,4.6159992 6.8670568,8.0860004 17.966058,8.0860004 17.966058,4.6159992 14.224057,4.6159992 14.224057,3.6590004C14.224057,2.6970005,13.413057,1.9139996,12.416057,1.9139996z M12.416057,0C14.172057,0,15.653057,1.1469994,16.093057,2.7019997L19.966057,2.7019997 19.966057,3.9999828 25.000044,3.9999828 25.000044,10.99998 25.000044,19.845975 23.000063,17.845976 23.000063,10.99998 23.000063,5.9999828 19.966057,5.9999828 19.966057,10 4.8670559,10 4.8670559,5.9999828 2.0000067,5.9999828 2.0000067,29.999983 10.929038,29.999983 12.929045,31.999983 0,31.999983 0,3.9999828 4.8670559,3.9999828 4.8670559,2.7019997 8.7390566,2.7019997C9.1790566,1.1469994,10.660057,0,12.416057,0z</PathGeometry>

    <!--  用到的转换器  -->
    <BooleanToVisibilityConverter x:Key="converter-bool-to-visibility" />

    <!--  Text  -->
    <FontFamily x:Key="font">Microsoft YaHei UI</FontFamily>
    <sys:Double x:Key="font-size">13</sys:Double>
    <Style x:Key="textblock" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource font-size}" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
        <Setter Property="Foreground" Value="{StaticResource brush-text}" />
    </Style>
    <Style x:Key="textblock-h1" TargetType="TextBlock">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
        <Setter Property="Foreground" Value="{StaticResource brush-text-highlight}" />
    </Style>
    <Style x:Key="textblock-h2" TargetType="TextBlock">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
        <Setter Property="Foreground" Value="{StaticResource brush-text-highlight}" />
    </Style>
    <Style x:Key="textblock-h3" TargetType="TextBlock">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
        <Setter Property="Foreground" Value="{StaticResource brush-text-highlight}" />
    </Style>
    <Style x:Key="textblock-weak" TargetType="TextBlock">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
        <Setter Property="Foreground" Value="{StaticResource brush-text-weak}" />
    </Style>

    <!--  Button colors  -->
    <Style x:Key="button" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Border x:Name="HoverBg" Padding="{TemplateBinding Padding}">
                            <ContentPresenter
                                x:Name="Text"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource brush-control-hover-fg}" />
                            <Setter TargetName="HoverBg" Property="BorderBrush" Value="{StaticResource brush-control-hover-bd}" />
                            <Setter TargetName="HoverBg" Property="Background" Value="{StaticResource brush-control-hover-bg}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource brush-control-press-fg}" />
                            <Setter TargetName="HoverBg" Property="BorderBrush" Value="{StaticResource brush-control-press-bd}" />
                            <Setter TargetName="HoverBg" Property="Background" Value="{StaticResource brush-control-press-bg}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource brush-control-disable-fg}" />
                            <Setter TargetName="HoverBg" Property="BorderBrush" Value="{StaticResource brush-control-disable-bd}" />
                            <Setter TargetName="HoverBg" Property="Background" Value="{StaticResource brush-control-disable-bg}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{StaticResource brush-control-bg}" />
        <Setter Property="Foreground" Value="{StaticResource brush-control-fg}" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-control-bd}" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
        <Setter Property="FontSize" Value="{StaticResource font-size}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="8,0" />
        <Setter Property="MinWidth" Value="60" />
        <Setter Property="Height" Value="30" />
    </Style>
    <Style x:Key="button-highlight" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Border x:Name="HoverBg" Padding="{TemplateBinding Padding}">
                            <ContentPresenter
                                x:Name="Text"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource brush-control-highlight-hover-fg}" />
                            <Setter TargetName="HoverBg" Property="BorderBrush" Value="{StaticResource brush-control-highlight-hover-bd}" />
                            <Setter TargetName="HoverBg" Property="Background" Value="{StaticResource brush-control-highlight-hover-bg}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource brush-control-highlight-press-fg}" />
                            <Setter TargetName="HoverBg" Property="BorderBrush" Value="{StaticResource brush-control-highlight-press-bd}" />
                            <Setter TargetName="HoverBg" Property="Background" Value="{StaticResource brush-control-highlight-press-bg}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource brush-control-highlight-disable-fg}" />
                            <Setter TargetName="HoverBg" Property="BorderBrush" Value="{StaticResource brush-control-highlight-disable-bd}" />
                            <Setter TargetName="HoverBg" Property="Background" Value="{StaticResource brush-control-highlight-disable-bg}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{StaticResource brush-control-highlight-bg}" />
        <Setter Property="Foreground" Value="{StaticResource brush-control-highlight-fg}" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-control-highlight-bd}" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
        <Setter Property="FontSize" Value="{StaticResource font-size}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="8,0" />
        <Setter Property="MinWidth" Value="60" />
        <Setter Property="Height" Value="30" />
    </Style>
    <Style x:Key="button-path-fill" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Border x:Name="HoverBg" Padding="{TemplateBinding Padding}">
                            <Path
                                x:Name="Path"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Data="{TemplateBinding Content}"
                                Fill="{TemplateBinding Foreground}"
                                Stretch="Uniform" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Path" Property="Fill" Value="{StaticResource brush-control-hover-fg}" />
                            <Setter TargetName="HoverBg" Property="BorderBrush" Value="{StaticResource brush-control-hover-bd}" />
                            <Setter TargetName="HoverBg" Property="Background" Value="{StaticResource brush-control-hover-bg}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Path" Property="Fill" Value="{StaticResource brush-control-press-fg}" />
                            <Setter TargetName="HoverBg" Property="BorderBrush" Value="{StaticResource brush-control-press-bd}" />
                            <Setter TargetName="HoverBg" Property="Background" Value="{StaticResource brush-control-press-bg}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Path" Property="Fill" Value="{StaticResource brush-control-disable-fg}" />
                            <Setter TargetName="HoverBg" Property="BorderBrush" Value="{StaticResource brush-control-disable-bd}" />
                            <Setter TargetName="HoverBg" Property="Background" Value="{StaticResource brush-transparent}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="Foreground" Value="{StaticResource brush-control-fg}" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-control-bd}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="MinWidth" Value="12" />
        <Setter Property="MinHeight" Value="12" />
    </Style>
    <Style x:Key="button-path-stroke" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Border x:Name="HoverBg" Padding="{TemplateBinding Padding}">
                            <Path
                                x:Name="Path"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Data="{TemplateBinding Content}"
                                Stretch="Uniform"
                                Stroke="{TemplateBinding Foreground}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Path" Property="Stroke" Value="{StaticResource brush-control-hover-fg}" />
                            <Setter TargetName="HoverBg" Property="BorderBrush" Value="{StaticResource brush-control-hover-bd}" />
                            <Setter TargetName="HoverBg" Property="Background" Value="{StaticResource brush-control-hover-bg}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Path" Property="Stroke" Value="{StaticResource brush-control-press-fg}" />
                            <Setter TargetName="HoverBg" Property="BorderBrush" Value="{StaticResource brush-control-press-bd}" />
                            <Setter TargetName="HoverBg" Property="Background" Value="{StaticResource brush-control-press-bg}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Path" Property="Stroke" Value="{StaticResource brush-control-disable-fg}" />
                            <Setter TargetName="HoverBg" Property="BorderBrush" Value="{StaticResource brush-control-disable-bd}" />
                            <Setter TargetName="HoverBg" Property="Background" Value="{StaticResource brush-transparent}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="Foreground" Value="{StaticResource brush-control-fg}" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-control-bd}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="MinWidth" Value="12" />
        <Setter Property="MinHeight" Value="12" />
    </Style>

    <!--  Checkbox  -->
    <Style x:Key="checkbox" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border
                                x:Name="Border"
                                Width="16"
                                Height="16"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding Foreground}"
                                BorderThickness="1"
                                CornerRadius="0">
                                <Grid>
                                    <Path
                                        x:Name="CheckMark"
                                        Width="10"
                                        Height="10"
                                        Data="M27.903015,0L32,4.0970465 12.369019,23.728029 11.685974,24.520998 0,14.441042 3.7819824,10.054994 11.330017,16.567019z"
                                        Fill="{StaticResource brush-accent-light}"
                                        SnapsToDevicePixels="False"
                                        Stretch="Uniform"
                                        Visibility="Collapsed" />
                                    <Path
                                        x:Name="InderminateMark"
                                        Width="8"
                                        Height="8"
                                        Data="M 0,0 8,0 8,8 0,8 Z"
                                        Fill="{StaticResource brush-accent-light}"
                                        SnapsToDevicePixels="False"
                                        Stretch="Uniform"
                                        Visibility="Collapsed" />
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter
                            Margin="4,0,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <!--<ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(Path.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-hover-fg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="InderminateMark" Storyboard.TargetProperty="(Path.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-hover-fg}" />
                                        </ObjectAnimationUsingKeyFrames>-->
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-hover-fg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-hover-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <!--<ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(Path.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-press-fg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="InderminateMark" Storyboard.TargetProperty="(Path.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-press-fg}" />
                                        </ObjectAnimationUsingKeyFrames>-->
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-press-fg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-press-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(Path.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-disable-fg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="InderminateMark" Storyboard.TargetProperty="(Path.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-disable-fg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-disable-fg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-disable-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="InderminateMark" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{StaticResource brush-control-fg}" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-control-bd}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="FontSize" Value="{StaticResource font-size}" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
    </Style>

    <!--  RadioButton  -->
    <Style x:Key="radiobutton" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="16" Height="16">
                                <Ellipse
                                    x:Name="Border"
                                    Fill="{TemplateBinding Background}"
                                    Stroke="{TemplateBinding Foreground}"
                                    StrokeThickness="1" />
                                <Ellipse
                                    x:Name="CheckMark"
                                    Margin="4"
                                    Fill="{StaticResource brush-accent-light}"
                                    Visibility="Collapsed" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter
                            Margin="4,0,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <!--<ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(Path.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-hover-fg}" />
                                        </ObjectAnimationUsingKeyFrames>-->
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Path.Stroke)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-hover-fg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Path.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-hover-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <!--<ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(Path.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-press-fg}" />
                                        </ObjectAnimationUsingKeyFrames>-->
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Path.Stroke)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-press-fg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Path.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-press-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(Path.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-disable-fg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Path.Stroke)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-disable-fg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Path.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-disable-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{StaticResource brush-control-fg}" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-control-bd}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="FontSize" Value="{StaticResource font-size}" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
    </Style>

    <!--  Thumb  -->
    <Style x:Key="thumb" TargetType="Thumb">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Border
                        x:Name="HitTag"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HitTag" Storyboard.TargetProperty="BorderBrush">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource brush-control-hover-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HitTag" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource brush-control-hover-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HitTag" Storyboard.TargetProperty="BorderBrush">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource brush-control-press-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HitTag" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource brush-control-press-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HitTag" Storyboard.TargetProperty="BorderBrush">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource brush-control-disable-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HitTag" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource brush-control-disable-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-control-bd}" />
        <Setter Property="Background" Value="{StaticResource brush-control-bg}" />
    </Style>

    <!--  ToolTip  -->
    <Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border
                        Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter
                            Margin="4"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="SnapsToDevicePixels" Value="true" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Background" Value="{StaticResource brush-panel-bg}" />
        <Setter Property="Foreground" Value="{StaticResource brush-control-fg}" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-panel-bd}" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
        <Setter Property="FontSize" Value="{StaticResource font-size}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
    </Style>

    <!--  ProgressBar  -->
    <Style x:Key="progressbar" TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Border x:Name="PART_Track" />
                            <Border
                                x:Name="PART_Indicator"
                                HorizontalAlignment="Left"
                                Background="{TemplateBinding Foreground}"
                                ClipToBounds="True">
                                <Rectangle
                                    x:Name="PART_GlowRect"
                                    Width="100"
                                    Margin="-100,0,0,0"
                                    HorizontalAlignment="Left"
                                    Fill="{StaticResource brush-accent-deep}" />
                            </Border>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Determinate" />
                                    <VisualState x:Name="Indeterminate" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{StaticResource brush-control-bg}" />
        <Setter Property="Foreground" Value="{StaticResource brush-accent}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-control-bd}" />
        <Setter Property="Height" Value="10" />
    </Style>

    <!--  ScrollBar  -->
    <sys:Double x:Key="scrollbar-size">12</sys:Double>
    <Style x:Key="button-scrollbar-line" TargetType="RepeatButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border x:Name="Border" Background="{TemplateBinding Background}">
                        <Path
                            x:Name="Path"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"
                            Stretch="None"
                            Stroke="{TemplateBinding Foreground}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Path" Property="Stroke" Value="{StaticResource brush-control-hover-fg}" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource brush-control-hover-bg}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Path" Property="Stroke" Value="{StaticResource brush-control-press-fg}" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource brush-control-press-bg}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Path" Property="Stroke" Value="{StaticResource brush-transparent}" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource brush-transparent}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="Foreground" Value="{StaticResource brush-control-fg}" />
    </Style>
    <Style x:Key="button-scrollbar-page" TargetType="RepeatButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="{StaticResource brush-transparent}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
    </Style>
    <ControlTemplate x:Key="scrollbar-vertical" TargetType="ScrollBar">
        <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="18" />
                    <RowDefinition />
                    <RowDefinition Height="18" />
                </Grid.RowDefinitions>
                <RepeatButton
                    Grid.Row="0"
                    Command="ScrollBar.LineUpCommand"
                    Content="M0,3 L3.5,0 L7,3"
                    Style="{StaticResource button-scrollbar-line}" />
                <Track
                    x:Name="PART_Track"
                    Grid.Row="1"
                    IsDirectionReversed="True">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource button-scrollbar-page}" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb
                            x:Name="Thumb"
                            Focusable="True"
                            IsTabStop="False"
                            RenderTransformOrigin="0.5,0.5"
                            Style="{StaticResource thumb}">
                            <Thumb.RenderTransform>
                                <ScaleTransform ScaleX="0.3" />
                            </Thumb.RenderTransform>
                        </Thumb>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource button-scrollbar-page}" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton
                    Grid.Row="2"
                    Command="ScrollBar.LineDownCommand"
                    Content="M0,0 L3.5,3 L7,0"
                    Style="{StaticResource button-scrollbar-line}" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup Name="CommonStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.15" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Normal" />
                    <VisualState Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetName="Thumb"
                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(ScaleTransform.ScaleX)"
                                To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState Name="Disabled" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Border>
    </ControlTemplate>
    <ControlTemplate x:Key="scrollbar-horizontal" TargetType="ScrollBar">
        <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="18" />
                    <ColumnDefinition />
                    <ColumnDefinition Width="18" />
                </Grid.ColumnDefinitions>
                <RepeatButton
                    Grid.Column="0"
                    Command="ScrollBar.LineLeftCommand"
                    Content="M3,0 L0,3.5 L3,7"
                    Style="{StaticResource button-scrollbar-line}" />
                <Track
                    x:Name="PART_Track"
                    Grid.Column="1"
                    IsDirectionReversed="False">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="ScrollBar.PageLeftCommand" Style="{StaticResource button-scrollbar-page}" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb
                            x:Name="Thumb"
                            Focusable="True"
                            IsTabStop="False"
                            RenderTransformOrigin="0.5,0.5"
                            Style="{StaticResource thumb}">
                            <Thumb.RenderTransform>
                                <ScaleTransform ScaleY="0.3" />
                            </Thumb.RenderTransform>
                        </Thumb>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="ScrollBar.PageRightCommand" Style="{StaticResource button-scrollbar-page}" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton
                    Grid.Column="2"
                    Command="ScrollBar.LineRightCommand"
                    Content="M0,0 L3,3.5 L0,7"
                    Style="{StaticResource button-scrollbar-line}" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup Name="CommonStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.15" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Normal" />
                    <VisualState Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetName="Thumb"
                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(ScaleTransform.ScaleY)"
                                To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState Name="Disabled" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Border>
    </ControlTemplate>
    <Style x:Key="scrollbar" TargetType="ScrollBar">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-transparent}" />
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="{StaticResource scrollbar-size}" />
                <Setter Property="Template" Value="{StaticResource scrollbar-horizontal}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="{StaticResource scrollbar-size}" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource scrollbar-vertical}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource brush-control-bg}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource brush-transparent}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ScrollViewer  -->
    <Style x:Key="scrollviewer" TargetType="ScrollViewer">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ScrollContentPresenter
                                x:Name="PART_ScrollContentPresenter"
                                Grid.RowSpan="2"
                                Grid.ColumnSpan="2"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                CanContentScroll="{TemplateBinding CanContentScroll}" />
                            <ScrollBar
                                x:Name="PART_VerticalScrollBar"
                                Grid.Row="0"
                                Grid.Column="1"
                                Maximum="{TemplateBinding ScrollableHeight}"
                                Style="{StaticResource scrollbar}"
                                ViewportSize="{TemplateBinding ViewportHeight}"
                                Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                Value="{TemplateBinding VerticalOffset}" />
                            <ScrollBar
                                x:Name="PART_HorizontalScrollBar"
                                Grid.Row="1"
                                Grid.Column="0"
                                Maximum="{TemplateBinding ScrollableWidth}"
                                Orientation="Horizontal"
                                Style="{StaticResource scrollbar}"
                                ViewportSize="{TemplateBinding ViewportWidth}"
                                Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                Value="{TemplateBinding HorizontalOffset}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-panel-bd}" />
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
    </Style>
    <!--  No scrollbar version  -->
    <Style x:Key="scrollviewer-slim" TargetType="ScrollViewer">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollContentPresenter
                            x:Name="PART_ScrollContentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            CanContentScroll="{TemplateBinding CanContentScroll}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-panel-bd}" />
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
    </Style>

    <!--  TextBox  -->
    <Style x:Key="textbox" TargetType="TextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        FontFamily="{TemplateBinding FontFamily}"
                        FontSize="{TemplateBinding FontSize}"
                        Foreground="{TemplateBinding Foreground}"
                        Style="{StaticResource scrollviewer}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ContentHost" Property="BorderBrush" Value="{StaticResource brush-control-hover-bd}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="PART_ContentHost" Property="BorderBrush" Value="{StaticResource brush-control-hover-bd}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_ContentHost" Property="Background" Value="{StaticResource brush-transparent}" />
                            <Setter TargetName="PART_ContentHost" Property="BorderBrush" Value="{StaticResource brush-transparent}" />
                            <Setter Property="Foreground" Value="{StaticResource brush-text}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="Foreground" Value="{StaticResource brush-text-highlight}" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-control-bd}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SelectionBrush" Value="{StaticResource brush-text-selection}" />
        <Setter Property="CaretBrush" Value="{StaticResource brush-text-caret}" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
        <Setter Property="FontSize" Value="{StaticResource font-size}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="4,0" />
        <Setter Property="Height" Value="25" />
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem
                        Command="ApplicationCommands.Cut"
                        Header="剪切(T)"
                        InputGestureText="Ctrl+X">
                        <MenuItem.Icon>
                            <Path
                                Width="16"
                                Height="16"
                                Data="{StaticResource icon-cut}"
                                Fill="{StaticResource brush-control-fg}"
                                Stretch="Uniform" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem
                        Command="ApplicationCommands.Copy"
                        Header="复制(C)"
                        InputGestureText="Ctrl+C">
                        <MenuItem.Icon>
                            <Path
                                Width="16"
                                Height="16"
                                Data="{StaticResource icon-copy}"
                                Fill="{StaticResource brush-control-fg}"
                                Stretch="Uniform" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem
                        Command="ApplicationCommands.Paste"
                        Header="粘贴(P)"
                        InputGestureText="Ctrl+V">
                        <MenuItem.Icon>
                            <Path
                                Width="16"
                                Height="16"
                                Data="{StaticResource icon-paste}"
                                Fill="{StaticResource brush-control-fg}"
                                Stretch="Uniform" />
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ListBox  -->
    <Style x:Key="listboxitem" TargetType="ListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Background="{TemplateBinding Background}">
                        <Border
                            Padding="{TemplateBinding Padding}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource brush-panel-select-bd}" />
                            <Setter Property="Background" Value="{StaticResource brush-panel-select-bg}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource brush-panel-hover-bd}" />
                            <Setter Property="Background" Value="{StaticResource brush-panel-hover-bg}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-transparent}" />
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="Foreground" Value="{StaticResource brush-control-fg}" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
        <Setter Property="FontSize" Value="{StaticResource font-size}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    </Style>
    <Style x:Key="listbox" TargetType="ListBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <ScrollViewer
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Style="{StaticResource scrollviewer}">
                        <ItemsPresenter />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-panel-bd}" />
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource listboxitem}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    </Style>

    <!--  ComboBox  -->
    <Style x:Key="combobox-togglebutton" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Path
                            x:Name="Arrow"
                            Margin="0,0,6,0"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="M0,0 L3.5,3 L7,0"
                            Stroke="{TemplateBinding Foreground}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Arrow" Property="Data">
                                <Setter.Value>
                                    <PathGeometry>M0,3 L3.5,0 L7,3</PathGeometry>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="combobox-textbox" TargetType="TextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Foreground="{TemplateBinding Foreground}"
                        Style="{StaticResource scrollviewer-slim}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="SelectionBrush" Value="{StaticResource brush-text-selection}" />
        <Setter Property="CaretBrush" Value="{StaticResource brush-text-caret}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="4,0" />
        <Setter Property="Height" Value="25" />
        <Setter Property="Focusable" Value="True" />
    </Style>
    <Style x:Key="comboboxitem" TargetType="ComboBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource brush-panel-hover-bd}" />
                            <Setter Property="Background" Value="{StaticResource brush-panel-hover-bg}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource brush-panel-select-bd}" />
                            <Setter Property="Background" Value="{StaticResource brush-panel-select-bg}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{StaticResource brush-panel-bd}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="Foreground" Value="{StaticResource brush-control-fg}" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
        <Setter Property="FontSize" Value="{StaticResource font-size}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="5,0,5,0" />
        <Setter Property="Height" Value="25" />
    </Style>
    <Style x:Key="combobox" TargetType="ComboBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <Border
                            x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <ToggleButton
                                    Background="{StaticResource brush-transparent}"
                                    FontFamily="{TemplateBinding FontFamily}"
                                    FontSize="{TemplateBinding FontSize}"
                                    Foreground="{TemplateBinding Foreground}"
                                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                    Style="{StaticResource combobox-togglebutton}" />
                                <ContentPresenter
                                    x:Name="ContentSite"
                                    Margin="5,0,20,0"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Center"
                                    Content="{TemplateBinding SelectionBoxItem}"
                                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                    IsHitTestVisible="False" />
                                <TextBox
                                    x:Name="PART_EditableTextBox"
                                    Margin="0,0,20,0"
                                    Background="{StaticResource brush-transparent}"
                                    FontFamily="{TemplateBinding FontFamily}"
                                    FontSize="{TemplateBinding FontSize}"
                                    Foreground="{TemplateBinding Foreground}"
                                    IsReadOnly="{TemplateBinding IsReadOnly}"
                                    Style="{StaticResource combobox-textbox}"
                                    Visibility="Hidden" />
                            </Grid>
                        </Border>
                        <Popup
                            MinWidth="{TemplateBinding ActualWidth}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Focusable="False"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            Placement="Bottom"
                            PopupAnimation="Fade"
                            SnapsToDevicePixels="True">
                            <ScrollViewer
                                HorizontalContentAlignment="Stretch"
                                Background="{StaticResource brush-popup-bg}"
                                BorderBrush="{StaticResource brush-popup-bd}"
                                BorderThickness="1"
                                Style="{StaticResource scrollviewer}">
                                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                            </ScrollViewer>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource brush-control-hover-fg}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brush-control-hover-bd}" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource brush-control-hover-bg}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource brush-control-hover-fg}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brush-control-hover-bd}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource brush-control-fg}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brush-transparent}" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource brush-transparent}" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="True">
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{StaticResource comboboxitem}" />
        <Setter Property="Foreground" Value="{StaticResource brush-control-fg}" />
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-control-bd}" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
        <Setter Property="FontSize" Value="{StaticResource font-size}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Height" Value="25" />
    </Style>

    <!--  Menu  -->
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="30,2,2,2" />
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-panel-bd}" />
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
    </Style>
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Grid>
            <Border
                x:Name="Border"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
                <ContentPresenter
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    ContentSource="Header"
                    RecognizesAccessKey="True" />
            </Border>
            <Popup
                x:Name="Popup"
                AllowsTransparency="False"
                Focusable="False"
                IsOpen="{TemplateBinding IsSubmenuOpen}"
                Placement="Bottom"
                PopupAnimation="Fade">
                <Popup.Effect>
                    <DropShadowEffect Color="DarkGreen" />
                </Popup.Effect>
                <ScrollViewer
                    Padding="2"
                    Background="{StaticResource brush-popup-bg}"
                    BorderBrush="{StaticResource brush-popup-bd}"
                    BorderThickness="1"
                    CanContentScroll="True"
                    Style="{StaticResource scrollviewer}">
                    <ScrollViewer.Effect>
                        <DropShadowEffect />
                    </ScrollViewer.Effect>
                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" />
                </ScrollViewer>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Foreground" Value="{StaticResource brush-control-hover-fg}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brush-panel-hover-bd}" />
                <Setter TargetName="Border" Property="Background" Value="{StaticResource brush-panel-hover-bg}" />
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="true">
                <Setter Property="Foreground" Value="{StaticResource brush-control-hover-fg}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brush-popup-bd}" />
                <Setter TargetName="Border" Property="Background" Value="{StaticResource brush-popup-bg}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource brush-control-disable-fg}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brush-panel-disable-bd}" />
                <Setter TargetName="Border" Property="Background" Value="{StaticResource brush-panel-disable-bg}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border
            x:Name="Border"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                ContentSource="Header"
                RecognizesAccessKey="True" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Foreground" Value="{StaticResource brush-control-hover-fg}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brush-panel-hover-bd}" />
                <Setter TargetName="Border" Property="Background" Value="{StaticResource brush-panel-hover-bg}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource brush-control-disable-fg}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brush-panel-disable-bd}" />
                <Setter TargetName="Border" Property="Background" Value="{StaticResource brush-panel-disable-bg}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border
            x:Name="Border"
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="35" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="25" />
                </Grid.ColumnDefinitions>
                <ContentPresenter
                    x:Name="Icon"
                    Margin="6,0,6,0"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    ContentSource="Icon" />
                <Border
                    x:Name="Check"
                    Width="16"
                    Height="16"
                    Margin="6,0,6,0"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Background="{StaticResource brush-transparent}"
                    BorderBrush="{TemplateBinding Foreground}"
                    BorderThickness="1"
                    Visibility="Collapsed">
                    <Path
                        x:Name="CheckMark"
                        Width="10"
                        Height="10"
                        Data="M27.903015,0L32,4.0970465 12.369019,23.728029 11.685974,24.520998 0,14.441042 3.7819824,10.054994 11.330017,16.567019z"
                        Fill="{StaticResource brush-accent-light}"
                        SnapsToDevicePixels="False"
                        Stretch="Uniform"
                        Visibility="Hidden" />
                </Border>
                <ContentPresenter
                    x:Name="HeaderHost"
                    Grid.Column="1"
                    VerticalAlignment="Center"
                    ContentSource="Header"
                    RecognizesAccessKey="True" />
                <TextBlock
                    x:Name="InputGestureText"
                    Grid.Column="2"
                    Margin="30,0,0,0"
                    VerticalAlignment="Center"
                    FontFamily="{TemplateBinding FontFamily}"
                    FontSize="{TemplateBinding FontSize}"
                    Foreground="{TemplateBinding Foreground}"
                    Text="{TemplateBinding InputGestureText}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Foreground" Value="{StaticResource brush-control-hover-fg}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brush-panel-hover-bd}" />
                <Setter TargetName="Border" Property="Background" Value="{StaticResource brush-panel-hover-bg}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource brush-control-disable-fg}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brush-panel-disable-bd}" />
                <Setter TargetName="Border" Property="Background" Value="{StaticResource brush-panel-disable-bg}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Grid>
            <Border
                x:Name="Border"
                Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
                <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="35" SharedSizeGroup="Icon" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter
                        x:Name="Icon"
                        Margin="6,0,6,0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        ContentSource="Icon" />
                    <ContentPresenter
                        x:Name="HeaderHost"
                        Grid.Column="1"
                        VerticalAlignment="Center"
                        ContentSource="Header"
                        RecognizesAccessKey="True" />
                    <TextBlock
                        x:Name="InputGestureText"
                        Grid.Column="2"
                        Margin="30,0,0,0"
                        VerticalAlignment="Center"
                        FontFamily="{TemplateBinding FontFamily}"
                        FontSize="{TemplateBinding FontSize}"
                        Foreground="{TemplateBinding Foreground}"
                        Text="{TemplateBinding InputGestureText}" />
                    <Path
                        Grid.Column="3"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="M0,0 L3,3.5 L0,7"
                        Stroke="{TemplateBinding Foreground}" />
                </Grid>
            </Border>
            <Popup
                x:Name="Popup"
                AllowsTransparency="True"
                Focusable="False"
                HorizontalOffset="-4"
                IsOpen="{TemplateBinding IsSubmenuOpen}"
                Placement="Right"
                PopupAnimation="Fade">
                <ScrollViewer
                    Padding="2"
                    Background="{StaticResource brush-popup-bg}"
                    BorderBrush="{StaticResource brush-popup-bd}"
                    BorderThickness="1"
                    CanContentScroll="True"
                    Style="{StaticResource scrollviewer}">
                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" />
                </ScrollViewer>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Foreground" Value="{StaticResource brush-control-hover-fg}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brush-panel-hover-bd}" />
                <Setter TargetName="Border" Property="Background" Value="{StaticResource brush-panel-hover-bg}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource brush-control-disable-fg}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brush-panel-disable-bd}" />
                <Setter TargetName="Border" Property="Background" Value="{StaticResource brush-panel-disable-bg}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Foreground" Value="{StaticResource brush-control-fg}" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-transparent}" />
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
        <Setter Property="FontSize" Value="{StaticResource font-size}" />
        <Setter Property="Height" Value="23" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Padding" Value="10,0" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ItemsPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-panel-bd}" />
        <Setter Property="Background" Value="{StaticResource brush-panel-bg}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
    </Style>
    <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border
                        x:Name="Border"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ItemsPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-popup-bd}" />
        <Setter Property="Background" Value="{StaticResource brush-popup-bg}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
    </Style>

    <!--  DataGrid  -->
    <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle
                            x:Name="Border"
                            Fill="{StaticResource brush-control-bg}"
                            SnapsToDevicePixels="True"
                            Stroke="{StaticResource brush-control-bd}"
                            StrokeThickness="1" />
                        <Polygon
                            x:Name="Arrow"
                            Margin="8,8,3,3"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Bottom"
                            Fill="{StaticResource brush-control-fg}"
                            Opacity="0.15"
                            Points="0,10 10,10 10,0"
                            Stretch="Uniform" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-hover-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Fill)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-press-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type DataGrid}" TargetType="{x:Type DataGrid}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-panel-bd}" />
        <Setter Property="Background" Value="{StaticResource brush-panel-bg}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource brush-panel-bd}" />
        <Setter Property="VerticalGridLinesBrush" Value="{StaticResource brush-panel-bd}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border
                        x:Name="border"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer
                            x:Name="DG_ScrollViewer"
                            Background="{StaticResource brush-transparent}"
                            Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <Button
                                            Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                            Command="{x:Static DataGrid.SelectAllCommand}"
                                            Focusable="false"
                                            Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle,
                                                                                          TypeInTargetAssembly={x:Type DataGrid}}}"
                                            Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        <DataGridColumnHeadersPresenter
                                            x:Name="PART_ColumnHeadersPresenter"
                                            Grid.Column="1"
                                            Grid.ColumnSpan="2"
                                            Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        <ScrollContentPresenter
                                            x:Name="PART_ScrollContentPresenter"
                                            Grid.Row="1"
                                            Grid.RowSpan="2"
                                            Grid.ColumnSpan="3"
                                            CanContentScroll="{TemplateBinding CanContentScroll}" />
                                        <ScrollBar
                                            x:Name="PART_VerticalScrollBar"
                                            Grid.Row="1"
                                            Grid.Column="2"
                                            Maximum="{TemplateBinding ScrollableHeight}"
                                            Orientation="Vertical"
                                            Style="{StaticResource scrollbar}"
                                            ViewportSize="{TemplateBinding ViewportHeight}"
                                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                            Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Grid Grid.Row="2" Grid.Column="1">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar
                                                x:Name="PART_HorizontalScrollBar"
                                                Grid.Column="1"
                                                Maximum="{TemplateBinding ScrollableWidth}"
                                                Orientation="Horizontal"
                                                Style="{StaticResource scrollbar}"
                                                ViewportSize="{TemplateBinding ViewportWidth}"
                                                Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                                Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-disable-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-disable-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Normal" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsGrouping" Value="true">
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type DataGridCell}" TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border
                        x:Name="border"
                        Padding="{TemplateBinding Padding}"
                        Background="{StaticResource brush-transparent}"
                        BorderBrush="{StaticResource brush-transparent}"
                        BorderThickness="0"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Unfocused" />
                                <VisualState x:Name="Focused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CurrentStates">
                                <VisualState x:Name="Regular" />
                                <VisualState x:Name="Current">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-select-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-select-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontFamily" Value="{StaticResource font}" />
        <Setter Property="FontSize" Value="{StaticResource font-size}" />
        <Setter Property="Foreground" Value="{StaticResource brush-control-fg}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10,0" />
    </Style>
    <Style x:Key="{x:Type DataGridRow}" TargetType="{x:Type DataGridRow}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Border
                        x:Name="DGR_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <SelectiveScrollingGrid>
                            <SelectiveScrollingGrid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </SelectiveScrollingGrid.ColumnDefinitions>
                            <SelectiveScrollingGrid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </SelectiveScrollingGrid.RowDefinitions>
                            <DataGridCellsPresenter
                                Grid.Column="1"
                                ItemsPanel="{TemplateBinding ItemsPanel}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <DataGridDetailsPresenter
                                Grid.Row="1"
                                Grid.Column="1"
                                SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                Visibility="{TemplateBinding DetailsVisibility}" />
                            <DataGridRowHeader
                                Grid.RowSpan="2"
                                SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                                Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                        </SelectiveScrollingGrid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <!--  Provide a different appearance for every other row.  -->
                                <VisualState x:Name="Normal_AlternatingRow">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-alternate-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-alternate-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <!--
                                    In this example, a row in Editing or selected mode has an
                                    identical appearances. In other words, the states
                                    Normal_Selected, Unfocused_Selected, Normal_Editing,
                                    MouseOver_Editing, MouseOver_Unfocused_Editing,
                                    and Unfocused_Editing are identical.
                                -->
                                <VisualState x:Name="Normal_Selected">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-select-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-select-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused_Selected">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-select-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-select-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Normal_Editing">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-hover-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-hover-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver_Editing">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-hover-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-hover-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver_Unfocused_Editing">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-hover-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-hover-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused_Editing">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-hover-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-hover-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-hover-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-hover-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <!--
                                    In this example, the appearance of a selected row
                                    that has the mouse over it is the same regardless of
                                    whether the row is selected.  In other words, the states
                                    MouseOver_Editing and MouseOver_Unfocused_Editing are identical.
                                -->
                                <VisualState x:Name="MouseOver_Selected">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-hover-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-hover-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver_Unfocused_Selected">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-hover-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-panel-hover-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{StaticResource brush-panel-bg}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock
                        Margin="2,0,0,0"
                        VerticalAlignment="Center"
                        Foreground="{StaticResource brush-accent}"
                        Style="{StaticResource textblock}"
                        Text="!" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="thumb-rowheadergripper" TargetType="{x:Type Thumb}">
        <Setter Property="Height" Value="8" />
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="Cursor" Value="SizeNS" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type DataGridRowHeader}" TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid>
                        <Border
                            x:Name="rowHeaderBorder"
                            Width="10"
                            Background="{StaticResource brush-control-bg}"
                            BorderBrush="{StaticResource brush-control-bd}"
                            BorderThickness="1">
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <Control
                                    SnapsToDevicePixels="false"
                                    Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"
                                    Visibility="{Binding (Validation.HasError), Converter={StaticResource converter-bool-to-visibility}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" />
                            </StackPanel>
                        </Border>
                        <Thumb
                            x:Name="PART_TopHeaderGripper"
                            VerticalAlignment="Top"
                            Style="{StaticResource thumb-rowheadergripper}" />
                        <Thumb
                            x:Name="PART_BottomHeaderGripper"
                            VerticalAlignment="Bottom"
                            Style="{StaticResource thumb-rowheadergripper}" />
                        <VisualStateManager.VisualStateGroups>
                            <!--
                                This example does not specify an appearance for every
                                state.  You can add storyboard to the states that are listed
                                to change the appearance of the DataGridRowHeader when it is
                                in a specific state.
                            -->
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Normal_CurrentRow" />
                                <VisualState x:Name="Unfocused_EditingRow" />
                                <VisualState x:Name="Normal_EditingRow" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="rowHeaderBorder" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-hover-bd}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="rowHeaderBorder" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource brush-control-hover-bg}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver_CurrentRow" />
                                <VisualState x:Name="MouseOver_Unfocused_EditingRow" />
                                <VisualState x:Name="MouseOver_EditingRow" />
                                <VisualState x:Name="MouseOver_Unfocused_Selected" />
                                <VisualState x:Name="MouseOver_Selected" />
                                <VisualState x:Name="MouseOver_Unfocused_CurrentRow_Selected" />
                                <VisualState x:Name="MouseOver_CurrentRow_Selected" />
                                <VisualState x:Name="Unfocused_Selected" />
                                <VisualState x:Name="Unfocused_CurrentRow_Selected" />
                                <VisualState x:Name="Normal_CurrentRow_Selected" />
                                <VisualState x:Name="Normal_Selected" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="thumb-columnheadergripper" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="8" />
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="Cursor" Value="SizeWE" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type DataGridColumnHeader}" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <Border
                            x:Name="columnHeaderBorder"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <Thumb
                            x:Name="PART_LeftHeaderGripper"
                            HorizontalAlignment="Left"
                            Style="{StaticResource thumb-columnheadergripper}" />
                        <Thumb
                            x:Name="PART_RightHeaderGripper"
                            HorizontalAlignment="Right"
                            Style="{StaticResource thumb-columnheadergripper}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{StaticResource brush-transparent}" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-control-bd}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{StaticResource font}" />
        <Setter Property="FontSize" Value="{StaticResource font-size}" />
        <Setter Property="Foreground" Value="{StaticResource brush-control-fg}" />
        <Setter Property="Height" Value="25" />
    </Style>
    <Style x:Key="{x:Type DataGridColumnHeadersPresenter}" TargetType="{x:Type DataGridColumnHeadersPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
                    <Grid>
                        <DataGridColumnHeader x:Name="PART_FillerColumnHeader" IsHitTestVisible="False" />
                        <ItemsPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Window  -->
    <Style x:Key="window-shell" TargetType="Window">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Window">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click" SourceName="BtnMinimize">
                                <ei:ChangePropertyAction
                                    PropertyName="WindowState"
                                    TargetObject="{Binding RelativeSource={RelativeSource AncestorType=Window}}"
                                    Value="Minimized" />
                            </i:EventTrigger>
                            <i:EventTrigger EventName="Click" SourceName="BtnMaximize">
                                <ei:ChangePropertyAction
                                    PropertyName="WindowState"
                                    TargetObject="{Binding RelativeSource={RelativeSource AncestorType=Window}}"
                                    Value="Maximized" />
                            </i:EventTrigger>
                            <i:EventTrigger EventName="Click" SourceName="BtnRestore">
                                <ei:ChangePropertyAction
                                    PropertyName="WindowState"
                                    TargetObject="{Binding RelativeSource={RelativeSource AncestorType=Window}}"
                                    Value="Normal" />
                            </i:EventTrigger>
                            <i:EventTrigger EventName="Click" SourceName="BtnClose">
                                <ei:CallMethodAction MethodName="Close" TargetObject="{Binding RelativeSource={RelativeSource AncestorType=Window}}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <AdornerDecorator>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="30" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid Background="{StaticResource brush-accent}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <ContentControl Content="{TemplateBinding Tag}" />
                                    <StackPanel
                                        Grid.Column="1"
                                        Orientation="Horizontal"
                                        WindowChrome.IsHitTestVisibleInChrome="True">
                                        <Button
                                            x:Name="BtnMinimize"
                                            Width="30"
                                            Padding="8"
                                            Style="{StaticResource button-path-fill}">
                                            <Button.Content>
                                                <PathGeometry>M7.9750088,17.000004L24.024009,17.000004C24.577003,17.000004 25.024009,17.447025 25.024009,18.000004 25.024009,18.552982 24.577003,19.000004 24.024009,19.000004L7.9750088,19.000004C7.4219998,19.000004 6.9750087,18.552982 6.9750089,18.000004 6.9750087,17.447025 7.4219998,17.000004 7.9750088,17.000004z M2,2L2,26 30,26 30,2z M0,0L32,0 32,28 0,28z</PathGeometry>
                                            </Button.Content>
                                        </Button>
                                        <Button
                                            x:Name="BtnMaximize"
                                            Width="30"
                                            Padding="8"
                                            Style="{StaticResource button-path-fill}">
                                            <Button.Content>
                                                <PathGeometry>M1.9999998,8.009992L1.9999998,29.99999 24,29.99999 24,8.009992z M6.9999855,2L6.9999855,6.0099912 26,6.0099912 26,25.004003 29.999985,25.004003 29.999985,2z M4.9999855,0L31.999985,0 31.999985,27.004003 26,27.004003 26,31.99999 0,31.99999 0,6.0099912 4.9999855,6.0099912z</PathGeometry>
                                            </Button.Content>
                                        </Button>
                                        <Button
                                            x:Name="BtnRestore"
                                            Width="30"
                                            Padding="8"
                                            Style="{StaticResource button-path-fill}"
                                            Visibility="Collapsed">
                                            <Button.Content>
                                                <PathGeometry>M2.401001,9.1999828L2.401001,29.599002 24.003998,29.599002 24.003998,9.1999828z M0,5.5999762L26.395996,5.5999762 26.395996,31.994998 0,31.994998z M10.852997,0L32,0 32,21.596988 29.598022,21.596988 29.598022,2.3999938 10.85202,2.3999938z</PathGeometry>
                                            </Button.Content>
                                        </Button>
                                        <Button
                                            x:Name="BtnClose"
                                            Width="30"
                                            Padding="9"
                                            Style="{StaticResource button-path-fill}">
                                            <Button.Content>
                                                <PathGeometry>M1.442037,0L16.002031,14.585751 30.588022,0.025996563 32.001024,1.4409965 17.414783,16.001002 31.97503,30.587006 30.560022,32 15.999268,17.413969 1.4130009,31.973999 0,30.558998 14.586494,15.998742 0.027028472,1.4140019z</PathGeometry>
                                            </Button.Content>
                                        </Button>
                                    </StackPanel>
                                </Grid>
                                <ContentPresenter Grid.Row="1" />
                            </Grid>
                        </AdornerDecorator>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="BtnMaximize" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="BtnRestore" Property="Visibility" Value="Visible" />
                            <Setter Property="BorderThickness" Value="7" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="NoResize">
                            <Setter TargetName="BtnMinimize" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="BtnMaximize" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="BtnRestore" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="CanMinimize">
                            <Setter TargetName="BtnMaximize" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="BtnRestore" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="30" UseAeroCaptionButtons="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource brush-window-bd}" />
        <Setter Property="Background" Value="{StaticResource brush-window-bg}" />
    </Style>
</ResourceDictionary>